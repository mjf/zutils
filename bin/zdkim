#! /bin/sh

# zdkim - Simple script to generate DKIM records
# Copyright (C) 2023 Matous Jan Fialka, <https://mjf.cz/>
# Released under the terms of the "MIT" license

# Example: zdkim rsa mx-2023060701 /path/to/private-key.pem
# Warning: Only the most basic checking is performed.

alias error='1>&2 echo ${0##*/}:'
alias quiet='2>/dev/null'

if [ $# -ne 3 ]; then
	error 'pass private key (PK) kind, DKIM selector and path to PK'
	exit 1
fi

case "$1" in
	rsa | ed25519)
		;;
	\? | help)
		echo 'ed25519'
		echo 'rsa'
		exit 0
		;;
	*)
		error 'DKIM private key kind not recognized, try "?" instead'
		exit 128
esac

if ! grep -q -E '^[a-z0-9][a-z0-9_-]+$' <<< "$2"; then
	error 'DKIM selector must match /^[a-z0-9][a-z0-9_-]+$/'
	exit 129
fi

if ! [ -f "$3" -a -r "$3" ]; then
	error 'private key file could not be read'
	exit 130
fi

echo -n -e "$2._domainkey IN TXT \"v=DKIM1; k=$1; p=\" "

quiet openssl pkey -in "$3" -pubout -outform DER |

case "$1" in
	ed25519)
		# With Ed25519 there are no settings, so there is no need
		# for an ASN.1 structure.  When using Ed25519 the p value
		# in the DKIM DNS record must only contain the BASE64
		# encoded public key, without an ASN.1 structure.

		quiet openssl asn1parse -inform DER -offset 12 -noout -out - |
		quiet openssl base64 -A
		;;
	rsa)
		# With RSA, the p value of the DKIM DNS record is expected
		# to contain an ASN.1 structure with the RSA public key.
		# This is needed because RSA keys can have properties such
		# as the key size and the exponent.

		quiet openssl base64 -A
esac |

zfold

# vi:ft=sh
